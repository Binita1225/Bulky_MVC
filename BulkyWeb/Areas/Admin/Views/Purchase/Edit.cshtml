
@model BulkyBook.Models.ViewModels.PurchaseVM 


<h2>Edit Purchase</h2>

<form asp-action="Edit" method="post">
    <input type="hidden" asp-for="PurchaseMaster.Id" />

    <div>
        <label>Name</label>
        <input asp-for="PurchaseMaster.CustomerName" class="form-control" />
        <span asp-validation-for="PurchaseMaster.CustomerName" class="text-danger"></span>
    </div>
    <div>
        <label>Email</label>
        <input asp-for="PurchaseMaster.CustomerEmail" class="form-control" />
        <span asp-validation-for="PurchaseMaster.CustomerEmail" class="text-danger"></span>
    </div>
    <div>
        <label>Phone Number</label>
        <input asp-for="PurchaseMaster.CustomerNo" class="form-control" />
        <span asp-validation-for="PurchaseMaster.CustomerNo" class="text-danger"></span>
    </div>
    <div>
        <label>Address</label>
        <input asp-for="PurchaseMaster.CustomerAddress" class="form-control" />
        <span asp-validation-for="PurchaseMaster.CustomerAddress" class="text-danger"></span>
    </div>
    <div>
        <label>Date</label>
        <input asp-for="PurchaseMaster.TransactionDate" class="form-control" type="date" />
    </div>

    <h4>Purchase Details</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Stock</th>
                <th>Rate</th>
                <th>RateUpto50</th>
                <th>RateAbove50</th>
                <th>RateAbove100</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody id="details-body">
            
            @for (int i = 0; i < Model.PurchaseDetail.Count; i++)
            {
                <tr>
                    <input type="hidden" asp-for="PurchaseDetail[@i].Id" />
                    <td>
                     <select asp-for="PurchaseDetail[@i].ItemId" class="form-control product-dropdown">
                        <option value="">Select Product</option>
                            @foreach (var product in Model.Products)
                            {
                                <option value="@product.Id" 
                                data-rate="@product.Rate"
                                        data-price="@product.RateUpto50"
                                        data-above50="@product.RateAbove50"
                                        data-hundred="@product.RateAbove100"
                                data-stock="@product.Stock">
                                    @product.Name
                                </option>
                            }
                     </select>
                    </td>
                    <td>
                    <input class="form-control stock" asp-for="PurchaseDetail[0].Stock" readonly />
                    </td>
                    <td>
                    <input asp-for="PurchaseDetail[@i].Rate" class="form-control rate" readonly />
                    </td>
                    <td>
                        <input asp-for="PurchaseDetail[@i].RateUpto50" class="form-control price" readonly />
                    </td>
                    <td>
                        <input asp-for="PurchaseDetail[@i].RateAbove50" class="form-control above50" readonly />
                    </td>
                    <td>
                        <input asp-for="PurchaseDetail[@i].RateAbove100" class="form-control hundred" readonly />
                    </td>
                    <td>
                    <input asp-for="PurchaseDetail[@i].Quantity" class="form-control quantity" />
                    </td>
                    <td>
                    <input asp-for="PurchaseDetail[@i].Total" class="form-control total" readonly />
                    </td>

                    <td>
                        <button type="button" class="btn btn-danger remove-row">Remove</button>
                    </td>
                </tr>
            }
        </tbody>

    </table>

    <button type="button" class="btn btn-primary" id="add-row">Add Row</button>
    <hr />
    <div>
        <button type="submit" class="btn btn-success">Save</button>
        <a asp-controller="Purchase" asp-action="Index" class="btn btn-secondary">Cancel</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        $(document).ready(function () {
            let rowCount = @Model.PurchaseDetail.Count;

            // Add row functionality
            $("#add-row").click(function () {
                let row = $("#details-body tr:first").clone();
                row.find("input, select").val(""); // Clear the values
                row.find("select").attr("name", `PurchaseDetail[${rowCount}].ItemId`);
                row.find(".rate").attr("name", `PurchaseDetail[${rowCount}].Rate`);
                row.find(".price").attr("name", `PurchaseDetail[${rowCount}].RateUpto50`);
                row.find(".above50").attr("name", `PurchaseDetail[${rowCount}].RateAbove50`);
                row.find(".hundred").attr("name", `PurchaseDetail[${rowCount}].RateAbove100`);
                row.find(".quantity").attr("name", `PurchaseDetail[${rowCount}].Quantity`);
                row.find(".total").attr("name", `PurchaseDetail[${rowCount}].Total`);
                $("#details-body").append(row);
                rowCount++;
            });

            // Remove row functionality
            $(document).on("click", ".remove-row", function () {
                $(this).closest("tr").remove();
            });

             // Fetch rate when product is selected
            $(document).on("change", ".product-dropdown", function () {
          // Get the selected option's data-rate attribute
          let rate = $(this).find(":selected").data("rate");
                let price = $(this).find(":selected").data("price");
                let above50 = $(this).find(":selected").data("above50");
                let hundred = $(this).find(":selected").data("hundred");
                // Update the rate input field
                $(this).closest("tr").find(".rate").val(rate); 
                $(this).closest("tr").find(".price").val(price); 
                $(this).closest("tr").find(".above50").val(above50); 
                $(this).closest("tr").find(".hundred").val(hundred);

            var stock = $(this).find(":selected").data("stock");
            $(this).closest("tr").find(".stock").val(stock);
    
          // Calculate and update the total
          let quantity = $(this).closest("tr").find(".quantity").val() || 0;
           $(this).closest("tr").find(".total").val(rate * quantity);
        });

            // Calculate total when quantity changes
            $(document).on("input", ".quantity", function () {
            let quantity = parseFloat($(this).val()) || 0;
                var rate = 0;
                if (quantity < 50) {
                    rate = parseFloat($(this).closest("tr").find(".rate").val()) || 0;
                }
                else if (quantity > 50 && quantity < 100) {
                    rate = parseFloat($(this).closest("tr").find(".above50").val()) || 0;
                }
                else {
                    rate = parseFloat($(this).closest("tr").find(".hundred").val()) || 0;
                }
            let total = quantity * rate;
            $(this).closest("tr").find(".total").val(total);
            });

        });
    </script>
}